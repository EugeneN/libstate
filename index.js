// Generated by CoffeeScript 1.6.2
(function() {
  var MY_STATE, get_state, lazy_init_my_state, swap_state, unwatch_state, watch_state, _AppState,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _AppState = window.AppState;

  MY_STATE = '_state';

  lazy_init_my_state = function() {
    var _base, _base1;

    _AppState.modstate || (_AppState.modstate = {});
    (_base = _AppState.modstate)[MY_STATE] || (_base[MY_STATE] = {});
    return (_base1 = _AppState.modstate[MY_STATE]).watchers || (_base1.watchers = {});
  };

  get_state = function(key, __AppState) {
    if (key && key !== MY_STATE) {
      lazy_init_my_state();
      return _AppState.modstate[key];
    } else {
      return void 0;
    }
  };

  swap_state = function(key, mutator) {
    var new_state, old_state, _ref;

    if (key && key !== MY_STATE) {
      lazy_init_my_state();
      old_state = _AppState.modstate[key];
      new_state = mutator(old_state);
      _AppState.modstate[key] = new_state;
      return (_ref = _AppState.modstate[MY_STATE].watchers[key]) != null ? _ref.map(function(h) {
        return h(old_state, new_state);
      }) : void 0;
    }
  };

  watch_state = function(key, handler) {
    var _base;

    lazy_init_my_state();
    (_base = _AppState.modstate[MY_STATE].watchers)[key] || (_base[key] = []);
    if (__indexOf.call(_AppState.modstate[MY_STATE].watchers[key], handler) < 0) {
      return _AppState.modstate[MY_STATE].watchers[key].push(handler);
    }
  };

  unwatch_state = function(key, handler) {
    var _base;

    lazy_init_my_state();
    (_base = _AppState.modstate[MY_STATE].watchers)[key] || (_base[key] = []);
    if (__indexOf.call(_AppState.modstate[MY_STATE].watchers[key], handler) >= 0) {
      return _AppState.modstate[MY_STATE].watchers[key] = _AppState.modstate[MY_STATE].watchers[key].filter(function(h) {
        return h !== handler;
      });
    }
  };

  module.exports = {
    get_state: get_state,
    swap_state: swap_state,
    watch_state: watch_state,
    unwatch_state: unwatch_state
  };

}).call(this);
